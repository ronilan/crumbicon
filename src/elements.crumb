//*** utility functions shared by event functions

// returns a props list where x and y are in relation to the app's x y
// and the look is either as supplied or as default for element.
// used by all elements
dynamic_props = { element look ->
  <-(if (is (type state) "string" ){
    <- (list 0 0 "")
  }{
    xy = (get state APP_XY)
    props = (get element 0)

    x = (add (get xy 0) (get props 0))
    y = (add (get xy 1) (get props 1))

    <- (if (or
      (less_than (get (get state APP_XY) X) 0)
      (less_than (get (get state APP_XY) Y) 0)
    ) {
      <- (list x y "")
    } {
      <- (if (is look void) {
        <- (list x y (get (get element 0) 2))
      } {
        <- (list x y look)
      })
    })
  })
}

// finds the next best place to put a color in the palette
// used in initialization of state and all pickers
ideal_palette_index = { curr palette ->
  <- (if (is (find palette void) void) {
    <- (remainder (add curr 1) (length palette))
  }{
    <- (find palette void)
  })
}

// used by all pickers
set_palette_in_state = { value ->
  curr = (get (get state PALETTE) PALETTE_INDEX)
  palette = (set (get (get state PALETTE) PALETTE_COLORS) value curr)

  <- (set state (list (ideal_palette_index curr palette) palette) PALETTE)
}

// used by pickers and canvas
get_row_column_in_element = { props ->
  r = (subtract (get mouse_xy 1) (get props 1))
  c = (subtract (integer (subtract (add (get mouse_xy 0) 1 ) (get props 0) )) 1)

  <- (list r c)
}

// used by pickers to return the ansi number under the mouse
calculate_color = { props col_num offset ->
  rc = (get_row_column_in_element props)
  calculated = (add (add (multiply (get rc 0) col_num) (get rc 1)) offset)
  
  <- calculated
}

// DFS implementation using a single list (which is folded into a "2d" list)
flood_fill = {data source_row source_col num_row num_col source color ->
  <- (if (or
    (less_than source_row 0)
    (greater_than source_row (subtract num_row 1))
    (less_than source_col 0)
    (greater_than source_col (subtract num_col 1))
  ) { 
    <- data 
  } (is source color) {
    <- data
  } {
    <- (if (not (is (get data (add (multiply source_row num_col) source_col)) source)) {
      <- data
    } {
      data = (set data color (add (multiply source_row num_col) source_col))

      data = (flood_fill data (subtract source_row 1) source_col num_row num_col source color)
      data = (flood_fill data (add source_row 1) source_col num_row num_col source color)
      data = (flood_fill data source_row (add source_col 1) num_row num_col source color)
      data = (flood_fill data source_row (subtract source_col 1) num_row num_col source color)

      <- data
    })
  })
}

canvas_look_from_data = { size data ->
  <- (map (range size) { _ row ->
    // due to the "rectangular nature of terminal pixels,
    // two pixels are used to represent each logical pixel"
    <- (map (range (multiply size 2)) { _ col ->
      halfcol = (integer (divide col 2))
      <- (if (is (get data (add (multiply row size) halfcol)) void) {
        <- ":"
      } {
        <- (background (get data (add (multiply row size) halfcol)) " ")
      })
    })
  })
}

canvas_data_from_click = { props size data paintbrush ->
  <- (if (is (mouse_over props mouse_xy) 1) {
    rc = (get_row_column_in_element props)
    source_color = (get data (add (multiply (get rc 0) size) (integer (divide (get rc 1) 2))))

    // click is single pixel coloring, shift click is flood fill
    <- (if (is mouse_code 4) {
      <- (flood_fill data (get rc 0) (integer (divide (get rc 1) 2)) size size source_color paintbrush)
    } {
      <- (set data paintbrush (add (multiply (get rc 0) size) (integer (divide (get rc 1) 2))))
    })
  })
}

//***  settings
app_width = 80
app_height = 24

//***  elements
centered_modal = ({
  props = (list 0 0 "")

  on_state = {
    (if (or
      (less_than (get (get state APP_XY) X) 0)
      (less_than (get (get state APP_XY) Y) 0)
    ) {
      look = (map (range (subtract (rows) 0)) { _ index ->
        <- (if (is index (integer (divide (rows) 2))) {
          r = (map (range (subtract (columns) 0)) { _ _ -> <- " " })
          point = (subtract (integer (divide (columns) 2)) 12)
          point = (if (less_than point 0) {
            <- 0
          }{
            <- point
          })
          <- (set r "Enlarge Terminal Window" point)
        } {
          <- (map (range (subtract (columns) 0)) { _ _ ->
            <- " "
          })
        })
      })

      (draw (list 0 0 look))
    } {
      (draw (list 0 0 ""))
    })

    <- state
  }

  <- (list void (list on_state void void void void))
})

// utility element with no visible look.
// clears screen on resize, handles app exit, "mouse out" of pickers.
screen = ({
  props = (list 
    0
    0
    ""
  )

  on_loop = {
    x = (integer (divide (subtract (columns) app_width) 2)) // center position on x
    y = (integer (divide (subtract (rows) app_height) 2))// center position on y

    curr = (list x y)

    <- (if (is curr (get state APP_XY)){
      <- state
    } {
      (go_to 0 2)
      (clear_below)

      <- (set state (list x y) APP_XY)
    })
  }

  on_keypress = {
    // exit with escape
    <- (if (is keypress_name "escape") {
      <- void
    } {
      <- state
    })
  }

  on_move = {
    // for when the mouse is NOT over any picker/palette
    <- (if 
      (not (or
        (is (mouse_over (dynamic_props color_picker void) mouse_xy) 1)
        (is (mouse_over (dynamic_props gray_picker void) mouse_xy) 1)
        (is (mouse_over (dynamic_props sixteen_picker void) mouse_xy) 1)
        (is (mouse_over (dynamic_props empty_picker void) mouse_xy) 1)
        (is (mouse_over (dynamic_props palette_picker void) mouse_xy) 1)
      )) {
    
      look = (if (is (get state PAINTBRUSH) void) {
        <- (get (get color_candidate 0) 2)
      }{
        <- (background (get state PAINTBRUSH) (get (get color_candidate 0) 2))
      })

      (draw (dynamic_props color_candidate look))
      (draw (dynamic_props color_candidate_label void))

      <- (set state (subtract 0 1) CANDIDATE)
    } {
      <- state
    })
  }

  on_state = {
    (draw (dynamic_props screen void))
    <- state
  }

  <- (list props (list on_state on_loop on_keypress on_move void))
})

// top title bar, resizable but not moving.
title = ({
  on_state = {
    look = (reduce (range (columns)) {accum _ _ -> <- (join accum " ") } "")
    look = (set look (join "Crumbicon: " path_to_file " " (string (get state SIZE)) "x" (string (get state SIZE)) )  0) 
    look = (inverse look)

    (draw (list 0 0 look))
    <- state
  }

  <- (list void (list on_state void void void void))
})

//* canvases
canvas_16 = ({
  props = (list
    23
    3
    (map (range 16) { _ _ -> 
      <- (map (range 32) { _ _ -> <-  ":"})
    })
  )

  on_state = {
    (if (is (get state SIZE) 16) {
      look = (canvas_look_from_data 16 (get state DATA))
      (draw (dynamic_props canvas_16 look))
    })

    <- state
  }

  on_click = {
    <- (if (is (get state SIZE) 16) {
      props = (dynamic_props canvas_16 (get (get canvas_16 0) 2) )

      <- (if (is (mouse_over props mouse_xy) 1) {
        data = (canvas_data_from_click props 16 (get state DATA) (get state PAINTBRUSH))
        <- (set state data DATA)
      } {
        <- state
      })
    } {
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

canvas_8 = ({
  props = (list
    31
    7
    (map (range 8) { _ _ -> 
      <- (map (range 16) { _ _ -> <-  ":"})
    })
  )

  on_state = {
    (if (is (get state SIZE) 8) {
      look = (canvas_look_from_data 8 (get state DATA))
      (draw (dynamic_props canvas_8 look))
    })

    <- state
  }

  on_click = {
    <- (if (is (get state SIZE) 8) {
      props = (dynamic_props canvas_8 (get (get canvas_8 0) 2) )

      <- (if (is (mouse_over props mouse_xy) 1) {
        data = (canvas_data_from_click props 8 (get state DATA) (get state PAINTBRUSH))
        <- (set state data DATA)
      } {
        <- state
      })
    } {
     <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

//* pickers
color_picker = ({
  props = (list
    3
    2
    (map (range 18) { item row -> 
      <- (map (range 12) { item col -> <- (background (add (multiply row 12) col 16) " ")})
    })
  )

  on_state = {
    (draw (dynamic_props color_picker void))
    <- state
  }

  on_move = {
    props = (dynamic_props color_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      calculated = (calculate_color props 12 16)
      <- (set state calculated CANDIDATE)
    } {
      <- state
    })
  }

  on_click = {
    props = (dynamic_props color_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      calculated = (calculate_color props 12 16)

      state = (set_palette_in_state calculated)
      <- (set state calculated PAINTBRUSH)
    } {
      <- state
    })
  }

  <- (list props (list on_state void void on_move on_click))
})

gray_picker = ({
  props = (list
    16
    2
    (map (range 12) { item row -> 
      <- (map (range 2) { item col -> <- (background (add (multiply row 2) col 232) " ")})
    })
  )

  on_state = {
    (draw (dynamic_props gray_picker void))
    <- state
  }

  on_move = {
    props = (dynamic_props gray_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      calculated = (calculate_color props 2 232)
      <- (set state calculated CANDIDATE)
    } {
      <- state
    })
  }

  on_click = {
      props = (dynamic_props gray_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      calculated = (calculate_color props 2 232)

      state = (set_palette_in_state calculated)
      <- (set state calculated PAINTBRUSH)
    } {
      <- state
    })
  }

  <- (list props (list on_state void void on_move on_click))
})

sixteen_picker = ({
  props = (list
    1
    2
    (map (range 16) { item row -> 
      <- (map (range 1) { item col -> <- 
        (background 
          (rgb_to_ansi_8 (ansi_8_to_rgb (add (multiply row 1) col)))
       " ")})
    })
  )

  on_state = {
    (draw (dynamic_props sixteen_picker void))
    <- state
  }

  on_move = {
    props = (dynamic_props sixteen_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      calculated = (rgb_to_ansi_8 (ansi_8_to_rgb (calculate_color props 1 0)))
      <- (set state calculated CANDIDATE)
    } {
      <- state
    })
  }

  on_click = {
      props = (dynamic_props sixteen_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      calculated = (rgb_to_ansi_8 (ansi_8_to_rgb (calculate_color props 1 0)))

      state = (set_palette_in_state calculated)
      <- (set state calculated PAINTBRUSH)
    } {
      <- state
    })
  }

  <- (list props (list on_state void void on_move on_click))
})

empty_picker = ({
  props = (list
    16
    18
    (list 
      (list ":" ":")
      (list ":" ":")
    )
  )

  on_state = {
    (draw (dynamic_props empty_picker void))
    <- state
  }

  on_move = {
    props = (dynamic_props empty_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- (set state void CANDIDATE)
    } {
      <- state
    })
  }

  on_click = {
      props = (dynamic_props empty_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {

      state = (set_palette_in_state void)
      <- (set state void PAINTBRUSH)
    } {
      <- state
    })
  }

  <- (list props (list on_state void void on_move on_click))
})

palette_picker = ({
  props = (list
    23
    21 
    (list
      (map (range 32) {_ index -> 
        <- (if (or (is (remainder index 4) 1) (is (remainder index 4) 2)) {<- ":"} {<- " "})
      })
    )
  )

  on_state = {
    pb = (get state PAINTBRUSH)
    pl = (get (get state PALETTE) PALETTE_INDEX)
    pll = (get (get state PALETTE) PALETTE_COLORS)

    look = (get (get palette_picker 0) 2)

    look = (map look { item row ->
        <- (map item { item col ->col
          <- (if (or (is (remainder col 4) 1) (is (remainder col 4) 2)) {
            coloring =  (get pll (integer (divide col 4)))
            active = (or 
              (is (add (multiply pl 4) 2) col)
              (is (add (multiply pl 4) 1) col)
            )
            <- (if (is (type coloring) "integer") {
              <- (background coloring (if (is active 1) {<- "+"} {<- " "} ))
            } {
              <- (if (is active 1) {<- "+"} {<- item} )
            })
            <- item
          } {
            <- " "
          })
        })
      })

    (draw (dynamic_props palette_picker look))
    <- state
  }

  on_move = {
    props = (dynamic_props palette_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      // calculate color
      r = (subtract (get mouse_xy 1) (get props 1))
      c = (subtract (integer (subtract (add (get mouse_xy 0) 1 ) (get props 0) )) 1)

      hovered = (if (or (is (remainder c 4) 1) (is (remainder c 4) 2)) {
        <- (integer (divide c 4))
      } {
        <- void
      })

      calculated = (if (is hovered void) {
        // -1 ius used to indicate that the candidate color is 
        // not a color (represented by number) 
        // nor is it transparent (represented by void)
        <- (subtract 0 1) 
      } { 
        <- (get (get (get state PALETTE) PALETTE_COLORS) hovered) 
      })

      <- (set state calculated CANDIDATE)
    } {
      <- state
    })
  }

  on_click = {
    props = (dynamic_props palette_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      // calculate color
      r = (subtract (get mouse_xy 1) (get props 1))
      c = (subtract (integer (subtract (add (get mouse_xy 0) 1 ) (get props 0) )) 1)
      
      selected = (if (or (is (remainder c 4) 1) (is (remainder c 4) 2)) {
        <- (integer (divide c 4))
      } {
        <- (get (get state PALETTE) PALETTE_INDEX)
      })
      state = (set state (set (get state PALETTE) selected  PALETTE_INDEX) PALETTE)

      pll = (get (get state PALETTE) PALETTE_COLORS)
      pb = (get pll selected)
      state = (set state pb PAINTBRUSH)

      <- state
    } {
      <- state
    })
  }

  <- (list props (list on_state void void on_move on_click))
})

color_selected_label = ({
  props = (list 
    62
    8
    ""
  )

  on_state = {
    paintbrush = (get state PAINTBRUSH)
    str =(if (is paintbrush void) {
      <- (string_pad_end ":transparent:" 13 " ")
    } {
      <-  (join (string_pad_end (string (get state PAINTBRUSH)) 3 " ") "   #" (ansi_8_to_hex (get state PAINTBRUSH)))
    })
    
    (draw (dynamic_props color_selected_label str))
    <-state
  }

  <- (list props (list on_state void void void void))
})

color_selected = ({
  props = (list 
    61
    9
    (map (range 2) { _ _ -> 
      <- (map (range 15) { _ _ -> <-  " "})
    })
  )

  on_state = {
    look = (if (is (get state PAINTBRUSH) void) {
      <- (get (get color_selected 0) 2)
    }{
      <- (background (get state PAINTBRUSH) (get (get color_selected 0) 2))
    })

    (draw (dynamic_props color_selected look))
    <-state
  }

  <- (list props (list on_state void void void void))
})

color_candidate = ({
  props = (list 
    61
    11
    (map (range 2) { _ _ -> 
      <- (map (range 15) { _ _ -> <-  " "})
    })
  )

  on_state = {
    candidate = (get state CANDIDATE)

    look = (if (is candidate void) {
      <- (get (get color_candidate 0) 2)
    }{
      <- (if (is candidate (subtract 0 1)) {

        paintbrush = (get state PAINTBRUSH)
        <- (if (is paintbrush void) {
          <- (get (get color_candidate 0) 2)
        } {
          <- (background paintbrush (get (get color_candidate 0) 2))
        })
      }{
        <- (background candidate (get (get color_candidate 0) 2))
      })
    })
    (draw (dynamic_props color_candidate look))

    <-state
  }

  <- (list props (list on_state void void void void))
})

color_candidate_label = ({
  props = (list 
    62
    13
    ""
  )

  on_state = {
    candidate = (get state CANDIDATE)
    str = (if 
      (is candidate void) {
        <- (string_pad_end ":transparent:" 13 " ")
      } (is candidate (subtract 0 1)) {
        <- (string_pad_end "" 13 " ")
      } {
        <- (join (string_pad_end (string candidate) 3 " ") "   #" (ansi_8_to_hex candidate)) 
      })

    (draw (dynamic_props color_candidate_label str))

    <-state
  }

  <- (list props (list on_state void void void void))
})

label_size  = ({
  props = (list
    59
    2
    "New:"
  )

  on_state = {
    (draw (dynamic_props label_size void))
    <- state
  }

  <- (list props (list on_state void void void void))
})

button_size_8 = ({
  props = (list
    67
    2
    // the look of clickable elements must be in form of a 2d list
    (list
      (underline (list "8" "x" "8"))
    )
  )

  on_state = {
    (draw (dynamic_props button_size_8 void))
    <- state
  }

  on_click = {
    props = (dynamic_props button_size_8 void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      // erase the canvas area if switching to 8x8
      (if (is (get state SIZE) 16) {
        eraser = (map (range 16) { _ _ -> 
            <- (map (range 32) { _ _ -> <-  " "})
          })
        (draw (dynamic_props canvas_16 eraser))
      })

      state = (set state 8 SIZE)
      <- (set state (map (range 64) { _ _ -> <- void}) DATA)
    } {
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

button_size_16 = ({
  props = (list
    74
    2
    // the look of clickable elements must be in form of a 2d list
    (list
      (underline (list "1" "6" "x" "1" "6"))
    )
  )

  on_state = {
    (draw (dynamic_props button_size_16 void))
    <- state
  }

  on_click = {
    props = (dynamic_props button_size_16 void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      state = (set state 16 SIZE)
      <- (set state (map (range 256) { _ _ -> <- void}) DATA)
    } {
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

label_finish  = ({
  props = (list
    59
    19
    "End:"
  )

  on_state = {
    (draw (dynamic_props label_finish void))
    <- state
  }

  <- (list props (list on_state void void void void))
})

button_exit = ({
  props = (list
    67
    19
    // the look of  clickable elements must be in form of a 2d list
    (list
     (underline (list "E" "x" "i" "t"))
    )
  )

  on_state = {
    (draw (dynamic_props button_exit void))
    <- state
  }

  on_click = {
    props = (dynamic_props button_exit void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- void
    } {
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

button_save = ({
  props = (list
    75
    19
    // the look of clickable elements must be in form of a 2d list
    (list
      (underline (list "S" "a" "v" "e"))
    )
  )

  on_loop = {
    // wait till next loop to exit
    <- (if (is (get state SAVE) 1){
      <- void
    } {
      <- state
    })
  }

  on_state = {
    (draw (dynamic_props button_save void))
    <- state
  }

  on_click = {
    props = (dynamic_props button_save void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- (set state 1 SAVE)
    } {
      <- state
    })
  }

  <- (list props (list on_state on_loop void void on_click))
})

//*** "export"
elements = (list 
  screen 
  centered_modal 
  title 
  canvas_8 
  canvas_16 
  color_picker
  gray_picker 
  empty_picker
  sixteen_picker
  palette_picker
  color_selected_label
  color_selected
  color_candidate
  color_candidate_label
  button_size_8
  button_size_16
  button_save
  button_exit 
  label_size
  label_finish
)
