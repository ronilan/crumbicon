// split a string on a single char separator
split = {in sep ->
  // convert to list of chars
  arr = (map (range (length in)) {index _ -> <- (get in index)})

  // reduce list of chars to list of words
  <- (if (is sep "") {<- arr} {
    <- (reduce arr {acc char _ ->
      last_index = (subtract (length acc) 1)

      <- (if (is char sep) {
        // add new item to result if we come across a separator
        <- (insert acc "") 
      } {
        // else, add char to the last item
        <- (set acc (insert (get acc last_index) char) last_index)
      })
    } (list ""))
  })
}

debug = { thing ->
  (print "\e[24;1H")
  (print thing)
  (print "             ")
}

file = (if (is (length arguments) 2) {<- (get arguments 1)} {<- "favicon.svg"})
text = (read_file file)

empty = (map (range 256) { _ _ -> <- void})
data = (if (is text void) {
  <- empty
} {
  start = (find text "<!-- crumbicon")
  end = (find text "crumbicon -->")
  <- (if (or (is start void) (is end void)) {
    <- empty
  } {
    <- (if (is (type start) integer) {
      <- empty
    } {
      start = (add start 15)
      arr = (map (split (get text start end) ":") {item _ -> 
        <- (if (is item "void") {
          <- void
        } {
          <- (integer item)
        })
      })
      <- arr
    })
  } )
})

// state after user manipulation
state = (use "./usables/colors.crumb" {
  <- (use "./usables/tui.crumb" "./elements.crumb" {

    x = (integer (divide (subtract (columns) app_width) 2)) // center position on x
    y = (integer (divide (subtract (rows) app_height) 2))// center position on y

    // initial state
    state = (list
      void // paintbrush color
      data // canvas data
      (list x y) // screen anchor
    )

    <- (start state elements)
  })
})

(use "export.crumb" {
  (svg (get state 1) (list 16 16 10) file)
})
