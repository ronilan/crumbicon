dynamic_props = { element look ->
  <-(if (is (type state) "string" ){
    <- (list 0 0 "")
  }{
    xy = (get state 2)
    props = (get element 0)
    x = (add (get xy 0) (get props 0))
    y = (add (get xy 1) (get props 1))
    <- (if (is look void) {
      <- (list x y (get (get element 0) 2)) 
    } {
      <- (list x y look)
    })
  })
}

app_width = 80
app_height = 24

message = ({
  props = (list 0 0 "")
  on_state = {
    (draw (dynamic_props screen void))
    <- state
  }

  <- (list void (list on_state void void void void))
})

screen = ({
  props = (list 
    0
    0
    "+"
  )
  
  on_state = {
    (draw (dynamic_props screen void))
    <- state
  }

  on_loop = {
    x = (integer (divide (subtract (columns) app_width) 2)) // center position on x
    y = (integer (divide (subtract (rows) app_height) 2))// center position on y

    curr = (list x y)

    <- (if (is curr (get state 2)){
      <- state
    } {
      (print "\e[2;0H\e[0J")
      x = (if (less_than x 0) {
        <- 0
      } {
        <- x
      })

      y = (if (less_than y 0) {
        <- 0
      } {
        <- y
      })

      <- (set state (list x y) 2)
    })
  }

  <- (list props (list on_state on_loop void void void void))
})

title = ({
  on_state = {
    look = (reduce (range (columns)) {accum _ _ -> <- (join accum " ") } "")
    look = (set look (join "Crumbicon: " file)  0) 
    look = (inverse look)

    (draw (list 0 0 look))
    <- state
  }

  <- (list void (list on_state void void void void void))
})

canvas = ({
  props = (list
    22 // (integer (divide (subtract (columns) 32) 2)) // center position on x
    2 //(subtract (integer (divide (subtract (rows) 16) 2)) 6)// center position on y and up
    (map (range 16) { _ _ -> 
      <- (map (range 32) { _ _ -> <-  ":"})
    })
  )

  on_state = {
    data = (get state 1)

    mapped = (map (range 16) { _ row -> 
      <- (map (range 32) { _ col -> 
        halfcol = (integer (divide col 2))
        <- (if (is (get data (add (multiply row 16) halfcol)) void) {
          <- ":"
        } {
          <- (background (get data (add (multiply row 16) halfcol)) " ")
        })
      })
    })

    (draw (dynamic_props canvas mapped))
    <- state
  }

  on_click = {
    props = (dynamic_props canvas (get (get canvas 0) 2) )

    <- (if (is (mouse_over props mouse_xy) 1) {
      r = (subtract (get mouse_xy 1) (get props 1))
      c = (integer (divide (subtract (integer (subtract (add (get mouse_xy 0) 1 ) (get props 0) )) 1) 2))
      
      data = (set (get state 1) (get state 0) (add (multiply r 16) c))

      <- (set state data 1)
    } {
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

color_picker = ({
  props = (list
    3 //(add (integer (divide (subtract (columns) 36) 2)) 0) // center position on x and to right
    2 //(add (integer (divide (subtract (rows) 16) 2)) 11)// center position on y and down
    (map (range 18) { item row -> 
      <- (map (range 12) { item col -> <- (background (add (multiply row 12) col 16) " ")})
    })
  )

  on_state = {
    (draw (dynamic_props color_picker void))
    <- state
  }

  on_click = {
      props = (dynamic_props color_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      // calculate color
      r = (subtract (get mouse_xy 1) (get props 1))
      c = (subtract (integer (subtract (add (get mouse_xy 0) 1 ) (get props 0) )) 1)
      calculated = (add (add (multiply r 12) c) 16)

      <- (set state calculated 0)
    } {
      <- state
    })
  }
  <- (list props (list on_state void void void on_click))
})

gray_picker = ({
  props = (list
    16 //(subtract (integer (divide (subtract (columns) 3) 2)) 20) // center position on x and left
    2 //(add (integer (divide (subtract (rows) 16) 2)) 11)// center position on y and down
    (map (range 12) { item row -> 
      <- (map (range 2) { item col -> <- (background (add (multiply row 2) col 232) " ")})
    })
  )

  on_state = {
    (draw (dynamic_props gray_picker void))
    <- state
  }

  on_click = {
      props = (dynamic_props gray_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      // calculate color
      r = (subtract (get mouse_xy 1) (get props 1))
      c = (subtract (integer (subtract (add (get mouse_xy 0) 1 ) (get props 0) )) 1)
      calculated = (add (add (multiply r 2) c) 232)

      // update state
      <- (set state calculated 0)
    } {
      <- state
    })
  }
  <- (list props (list on_state void void void on_click))
})

sixteen_picker = ({
  props = (list
    1 // (add (integer (divide (subtract (columns) 1) 2)) 20) // center position on x and left
    2 // (add (integer (divide (subtract (rows) 16) 2)) 11)// center position on y and down
    (map (range 16) { item row -> 
      <- (map (range 1) { item col -> <- 
        (background 
          (rgb_to_ansi_8 (ansi_8_to_rgb (add (multiply row 1) col)))
       " ")})
    })
  )

  on_state = {
    (draw (dynamic_props sixteen_picker void))
    <- state
  }

  on_click = {
      props = (dynamic_props sixteen_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      // calculate color
      r = (subtract (get mouse_xy 1) (get props 1)) // (get (get component 1) 1) == y
      c = (subtract (integer (subtract (add (get mouse_xy 0) 1 ) (get props 0) )) 1) // (get (get component 1) 0) == x
      calculated = (rgb_to_ansi_8 (ansi_8_to_rgb (add (multiply r 1) c) )) 

      <- (set state calculated 0)
    } {
      <- state
    })
  }
  <- (list props (list on_state void void void on_click))
})

empty_picker = ({
  props = (list
    16
    19
    (list 
      (list ":" ":")
    )
  )

  on_state = {
    (draw (dynamic_props empty_picker void))
    <- state
  }

  on_click = {
      props = (dynamic_props empty_picker void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- (set state void 0)
    } {
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

color_selected = ({
  props = (list 
    20
    2
    (list " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " ")
  )

  on_state = {
    mapped = (if (is (get state 0) void) {
      <- (get (get color_selected 0) 2)
    }{
      <- (background (get state 0) (get (get color_selected 0) 2))
    })

    (draw (dynamic_props color_selected mapped))
    <-state
  }

  <- (list props (list on_state void void void void))
})

button_save = ({
  props = (list
    55
    2
    (list
      (list "╔" "═" "═" "═" "═" "═" "═" "╗")
      (list "║" " " "S" "a" "v" "e" " " "║")
      (list "╚" "═" "═" "═" "═" "═" "═" "╝")
    )
  )

  on_state = {
    (draw (dynamic_props button_save void))
    <- state
  }

  on_click = {
    props = (dynamic_props button_save void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- "break"
    } {
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

button_wipe = ({
  props = (list
    55
    15
    (list
      (list "╔" "═" "═" "═" "═" "═" "═" "╗")
      (list "║" " " "W" "i" "p" "e" " " "║")
      (list "╚" "═" "═" "═" "═" "═" "═" "╝")
    )
  )

  on_state = {
    (draw (dynamic_props button_wipe void))
    <- state
  }

  on_click = {
    props = (dynamic_props button_wipe void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      // reset canvas data
      <- (set state (map (range 256) { _ _ -> <- void}) 1)
    } {
      <- state
    })
  }
  <- (list props (list on_state void void void on_click))
})

elements = (list screen title canvas color_picker gray_picker empty_picker sixteen_picker color_selected button_save button_wipe)
